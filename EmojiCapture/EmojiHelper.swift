//
//  Emoji.swift
//  EmojiCapture
//
//  Created by Kosuke Katsuki on 1/28/17.
//  Copyright ¬© 2017 Kosuke Katsuki. All rights reserved.
//

import Foundation

struct EmojiHelper {
    
    // Emoji Combining Sequence
    // http://www.unicode.org/Public/emoji/4.0//emoji-sequences.txt
    static func isEmojiCombining(_ string: String) -> Bool {
        var it = string.utf16.makeIterator();
        if let first = it.next()?.littleEndian,
            let second = it.next()?.littleEndian,
            let third = it.next()?.littleEndian {
            return (0x0023 <= first && first <= 0x0039)
                && second == 0xfe0f
                && third == 0x20E3
        }
        return false
    }
    
    // Flags
    // https://en.wikipedia.org/wiki/Regional_Indicator_Symbol
    static func isFlag(_ string: String) -> Bool {
        var it = string.unicodeScalars.makeIterator();
        if let first = it.next()?.value,
            let second = it.next()?.value {
            // imperfect check
            return (0x1f1e6 <= first && first <= 0x1f1ff)
                && (0x1f1e6 <= second && second <= 0x1f1ff)
        }
        return false
    }
    
    static let characters = "¬©Ô∏è¬ÆÔ∏è‚ÄºÔ∏è‚ÅâÔ∏è‚Ñ¢Ô∏è‚ÑπÔ∏è‚ÜîÔ∏è‚ÜïÔ∏è‚ÜñÔ∏è‚ÜóÔ∏è‚ÜòÔ∏è‚ÜôÔ∏è‚Ü©Ô∏è‚Ü™Ô∏è‚åö‚åõ‚å®Ô∏è‚èèÔ∏è‚è©‚è™‚è´‚è¨"
        + "‚è≠Ô∏è‚èÆÔ∏è‚èØÔ∏è‚è∞‚è±Ô∏è‚è≤Ô∏è‚è≥‚è∏Ô∏è‚èπÔ∏è‚è∫Ô∏è‚ìÇÔ∏è‚ñ™Ô∏è‚ñ´Ô∏è‚ñ∂Ô∏è‚óÄÔ∏è‚óªÔ∏è‚óºÔ∏è‚óΩ‚óæ‚òÄÔ∏è‚òÅÔ∏è‚òÇÔ∏è‚òÉÔ∏è‚òÑÔ∏è‚òéÔ∏è‚òëÔ∏è‚òî‚òï‚òòÔ∏è‚òùÔ∏è"
        + "‚ò†Ô∏è‚ò¢Ô∏è‚ò£Ô∏è‚ò¶Ô∏è‚ò™Ô∏è‚òÆÔ∏è‚òØÔ∏è‚ò∏Ô∏è‚òπÔ∏è‚ò∫Ô∏è‚ôÄÔ∏è‚ôÇÔ∏è‚ôà‚ôâ‚ôä‚ôã‚ôå‚ôç‚ôé‚ôè‚ôê‚ôë‚ôí‚ôì‚ô†Ô∏è‚ô£Ô∏è‚ô•Ô∏è‚ô¶Ô∏è‚ô®Ô∏è‚ôªÔ∏è"
        + "‚ôø‚öíÔ∏è‚öì‚öîÔ∏è‚öïÔ∏è‚öñÔ∏è‚öóÔ∏è‚öôÔ∏è‚öõÔ∏è‚öúÔ∏è‚ö†Ô∏è‚ö°‚ö™‚ö´‚ö∞Ô∏è‚ö±Ô∏è‚öΩ‚öæ‚õÑ‚õÖ‚õàÔ∏è‚õé‚õèÔ∏è‚õëÔ∏è‚õìÔ∏è‚õî‚õ©Ô∏è‚õ™‚õ∞Ô∏è‚õ±Ô∏è"
        + "‚õ≤‚õ≥‚õ¥Ô∏è‚õµ‚õ∑Ô∏è‚õ∏Ô∏è‚õπÔ∏è‚õ∫‚õΩ‚úÇÔ∏è‚úÖ‚úàÔ∏è‚úâÔ∏è‚úä‚úã‚úåÔ∏è‚úçÔ∏è‚úèÔ∏è‚úíÔ∏è‚úîÔ∏è‚úñÔ∏è‚úùÔ∏è‚ú°Ô∏è‚ú®‚ú≥Ô∏è‚ú¥Ô∏è‚ùÑÔ∏è‚ùáÔ∏è‚ùå‚ùé"
        + "‚ùì‚ùî‚ùï‚ùó‚ù£Ô∏è‚ù§Ô∏è‚ûï‚ûñ‚ûó‚û°Ô∏è‚û∞‚ûø‚§¥Ô∏è‚§µÔ∏è‚¨ÖÔ∏è‚¨ÜÔ∏è‚¨áÔ∏è‚¨õ‚¨ú‚≠ê‚≠ï„Ä∞Ô∏è„ÄΩÔ∏è„äóÔ∏è„äôÔ∏è"
    
    static let nonsurrogates: Set<UInt32> = {
        var result: Set<UInt32> = []
        for c in characters.characters {
            if let s = String(c).unicodeScalars.first?.value {
                result.insert(s)
            }
        }
        return result
    }()
    
    // Check the code point range approximately
    // https://en.wikipedia.org/wiki/Emoji#Unicode_blocks
    static func isEmojiCodePoint(_ s: String) -> Bool {
        if let v = s.unicodeScalars.first?.value {
            return (v == 0x000a9 || v == 0x000ae) // ¬©Ô∏è, ¬ÆÔ∏è
                || (0x1f004 <= v && v <= 0x1f9c0) // üÄÑ - üßÄ
                || nonsurrogates.contains(v)      // ‚ÄºÔ∏è - „äôÔ∏è (0x0203C, 0x03299)
            
        }
        return false
    }
    
    static func isEmoji(_ s: String) -> Bool {
        return isEmojiCodePoint(s) || isFlag(s) || isEmojiCombining(s)
    }
    
    static func isFullWidth(_ s: String) -> Bool {
        let scalars = s.utf16
        let high = scalars[scalars.startIndex].littleEndian
        return 0x0800 <= high && high <= 0x0fff
            || 0x1000 <= high && high <= 0xcfff
            || 0xd000 <= high && high <= 0xd7ff
            || 0xf900 <= high && high <= 0xffff
    }
}
